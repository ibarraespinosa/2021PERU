url = "https://geodata.md.gov/imap/rest/services/Transportation/MD_AnnualAverageDailyTraffic/MapServer/1"
token=''
ssl = FALSE
lines_datum <- jsonlite::fromJSON(
  httr::content(
    httr::POST(
      url,
      query=list(f="json",
                 token = token),
      encode="form",
      config = httr::config(ssl_verifypeer = ssl)
    ),
    as="text"
  )
)

###
query_url = paste(url, "query", sep = "/")
where = "1=1"
query <- list(where = where, returnIdsOnly = "true", token = token, f = "json")
response_raw <- httr::content(httr::POST(query_url, body = query,
                                         encode = "form", config = httr::config(ssl_verifypeer = ssl)),
                              as = "text")
response <- jsonlite::fromJSON(response_raw)
names(response)

ids_old <- response$objectIds
ids <- ids_old[5001:length(ids_old)]
###
ana::get_esri_features_by_ids
fields = c("*")
simplifyDataFrame = FALSE
simplifyVector = FALSE
query <- list(objectIds = paste(ids, collapse = ","),
              outFields = paste(fields, collapse = ","),
              token = token,
              outSR = "",
              f = "json")
response_raw <- httr::content(httr::POST(query_url,
                                         body = query,
                                         encode = "form",
                                         config = httr::config(ssl_verifypeer = ssl)),
                              as = "text")
response <- jsonlite::fromJSON(response_raw,
                               simplifyDataFrame = simplifyDataFrame,
                               simplifyVector = simplifyVector,
                               digits = NA)

esriJsonFeatures <- response$features

df <- jsonlite::fromJSON(response_raw,
                               # simplifyDataFrame = T,
                               simplifyVector = simplifyVector,
                               digits = NA)


###
library(magrittr)

json_feats = features = esriJsonFeatures
path2matrix <- function(path) {
  return(do.call(rbind, lapply(path, unlist)))
}
paths2multiline <- function(paths) {
  return(sf::st_multilinestring(lapply(paths, path2matrix)))
}
getGeometry <- function(feature) {
  return(paths2multiline(feature$geometry$paths))
}
geoms <- sf::st_sfc(lapply(features, getGeometry))
atts <- lapply(json_feats, "[[", 1) %>%
  lapply(function(att) lapply(att, function(x) return(ifelse(is.null(x), NA, x))))
af <- data.table::rbindlist(lapply(atts, as.data.frame.list,
                                   stringsAsFactors = FALSE))
data.table::setDF(af)
df <- sf::st_sf(geoms, af, crs = 32067)
# saveRDS(df, "/media/sergio/0A9AD66165F337622/MEGA/PhDgrive/Conferences/2021PERU/maryland_1_5000.rds")
saveRDS(df, "/media/sergio/0A9AD66165F337622/MEGA/PhDgrive/Conferences/2021PERU/maryland_5000_end.rds")
